<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<!--The sequence will list all the resolved Bugs in Bugherd and process them to send notifications to the requesters who raised them. -->
<sequence xmlns="http://ws.apache.org/ns/synapse" name="processResolvedBugsAndNotifyRequester">
    <property name="producteev.taskType" value="Bug" scope="operation"/>
    <!--List all the projects in Bugherd account. -->
    <bugherd.init>
        <apiUrl>{$ctx:bugherd.apiUrl}</apiUrl>
        <apiKey>{$ctx:bugherd.apiKey}</apiKey>
    </bugherd.init>
    <bugherd.listProjects/>
    <!--Removing unused headers. -->
    <sequence key="removeResponseHeaders"/>
    <!--Delaying each iteration by 5 seconds to resolve rate limit issue. -->
    <script language="js"><![CDATA[
		java.lang.Thread.sleep(5000);
	]]></script>
    <property name="bugherd.httpStatusCode" expression="$axis2:HTTP_SC"/>
    <!--START: If there occurs an authentication failure in Bugherd then display a custom generated error message. -->
    <filter source="get-property('bugherd.httpStatusCode')" regex="401">
        <then>
            <call-template target="responseHandlerTemplate">
                <with-param name="activity" value="producteev_updateTasksWithResolvedBugs"/>
                <with-param name="id" value="{$ctx:id.empty}"/>
                <with-param name="status" value="Error"/>
                <with-param name="message"
                            value="Failed to authenticate Bugherd API. Please verify the authentication credentials."/>
            </call-template>
            <loopback/>
        </then>
        <else>
            <!--Checking the availability of projects in Bugherd. -->
            <property name="bugherd.projectsCount" expression="count(//projects)" scope="operation"/>
            <property name="bugherd.projectsIndex" expression="0" scope="operation"/>
            <property name="bugherd.resolvedTasksCount" expression="0" scope="operation"/>
            <property name="bugherd.resolvedTasksIndex" expression="0" scope="operation"/>
            <!--START : Checking whether there are sufficient projects to process. -->
            <filter source="get-property('operation','bugherd.projectsCount')" regex="0.0">
                <then>
                    <call-template target="responseHandlerTemplate">
                        <with-param name="activity" value="bugherd_listProjects"/>
                        <with-param name="id" value="{$ctx:id.empty}"/>
                        <with-param name="status" value="Skipped"/>
                        <with-param name="message" value="There are no projects in the account to process."/>
                    </call-template>
                    <loopback/>
                </then>
                <else>
                    <!--BEGIN: FOR EACH project -->
                    <iterate continueParent="false" id="projectsIterator" expression="//projects" sequential="true">
                        <target>
                            <sequence>
                                <!--Get the project ID. -->
                                <property name="bugherd.projectId" expression="//projects/id/text()"/>
                                <!--Delaying each iteration by 5 seconds to resolve rate limit issue. -->
                                <script language="js"><![CDATA[
								java.lang.Thread.sleep(5000);
						]]></script>
                                <!-- List down all the tasks of the project that are resolved. -->
                                <bugherd.init>
                                    <apiUrl>{$ctx:bugherd.apiUrl}</apiUrl>
                                    <apiKey>{$ctx:bugherd.apiKey}</apiKey>
                                    <projectId>{$ctx:bugherd.projectId}</projectId>
                                </bugherd.init>
                                <bugherd.listProjectTasks>
                                    <status>done</status>
                                </bugherd.listProjectTasks>
                                <!--Removing unused headers. -->
                                <sequence key="removeResponseHeaders"/>
                                <property name="bugherd.resolvedTasksCount" expression="count(//tasks)"/>
                                <!--START : Checking whether there are sufficient tasks to process. -->
                                <filter source="get-property('bugherd.resolvedTasksCount')" regex="0.0">
                                    <then>
                                        <!--Increment the projects index by 1. -->
                                        <property name="bugherd.projectsIndex"
                                                  expression="get-property('operation', 'bugherd.projectsIndex') + 1"
                                                  scope="operation"/>
                                    </then>
                                    <else>
                                        <!-- Increment the task count by the number of tasks available in the current project. -->
                                        <property name="bugherd.resolvedTasksCount"
                                                  expression="get-property('operation', 'bugherd.resolvedTasksCount') + get-property('bugherd.resolvedTasksCount')"
                                                  scope="operation"/>
                                        <!--Increment the projects index by 1. -->
                                        <property name="bugherd.projectsIndex"
                                                  expression="get-property('operation', 'bugherd.projectsIndex') + 1"
                                                  scope="operation"/>
                                        <!--BEGIN : FOR EACH task -->
                                        <iterate continueParent="false" id="resolvedTaskIterator" expression="//tasks"
                                                 sequential="false">
                                            <target>
                                                <sequence>
                                                    <property name="bugherd.resolvedTaskId"
                                                              expression="//tasks/id/text()"/>
                                                    <property name="producteev.taskId"
                                                              expression="//tasks/external_id/text()"/>
                                                    <property name="producteev.taskSubject"
                                                              expression="//tasks/description/text()"/>
                                                    <property name="bugherd.resolvedTaskStatus"
                                                              expression="//tasks/status/text()"/>
                                                    <property name="producteev.clientEmail"
                                                              expression="//tasks/requester_email/text()"/>
                                                    <!--Call the 'retrieveTaskDetailsFromNotes' template in order to retrieve the note details from the Producteev task. -->
                                                    <call-template target="retrieveTaskDetailsFromNotes">
                                                        <with-param name="producteev.apiUrl"
                                                                    value="{$ctx:producteev.apiUrl}"/>
                                                        <with-param name="producteev.accessToken"
                                                                    value="{$ctx:producteev.accessToken}"/>
                                                        <with-param name="producteev.taskId"
                                                                    value="{$ctx:pagerDuty.incidentKey}"/>
                                                    </call-template>
                                                    <bugherd.init>
                                                        <apiUrl>{$ctx:bugherd.apiUrl}</apiUrl>
                                                        <apiKey>{$ctx:bugherd.apiKey}</apiKey>
                                                        <projectId>{$ctx:bugherd.projectId}</projectId>
                                                    </bugherd.init>
                                                    <bugherd.listTaskComments>
                                                        <taskId>{$ctx:bugherd.resolvedTaskId}</taskId>
                                                    </bugherd.listTaskComments>
                                                    <!--Delaying each iteration by 5 seconds to resolve rate limit issue. -->
                                                    <script language="js">
                                                        <![CDATA[
											                java.lang.Thread.sleep(5000);
										                ]]>
                                                    </script>
                                                    <!--Removing unused headers. -->
                                                    <sequence key="removeResponseHeaders"/>
                                                    <property name="bugherd.resolvedTaskCommentResponse"
                                                              expression="//comments"/>
                                                    <property name="id"
                                                              expression="fn:concat('bugherd_taskId:', get-property('bugherd.resolvedTaskId'))"/>
                                                    <!--START : Checking whether there are any errors in retrieving the comments of the task. -->
                                                    <filter source="boolean(get-property('bugherd.resolvedTaskCommentResponse'))"
                                                            regex="false">
                                                        <then>
                                                            <property name="bugherd.errorResponse"
                                                                      expression="json-eval($)"/>
                                                            <call-template target="responseHandlerTemplate">
                                                                <with-param name="activity"
                                                                            value="bugherd_listComments"/>
                                                                <with-param name="id" value="{$ctx:id}"/>
                                                                <with-param name="status" value="Error"/>
                                                                <with-param name="message"
                                                                            value="{$ctx:bugherd.errorResponse}"/>
                                                            </call-template>
                                                        </then>
                                                        <else>
                                                            <property name="bugherd.resolvedTaskCommentCount"
                                                                      expression="count(//comments)"/>
                                                            <!--START : Checking whether there are sufficient comments to process. -->
                                                            <filter source="get-property('bugherd.resolvedTaskCommentCount')"
                                                                    regex="0.0">
                                                                <then>
                                                                    <call-template target="responseHandlerTemplate">
                                                                        <with-param name="activity"
                                                                                    value="bugherd_listComments"/>
                                                                        <with-param name="id" value="{$ctx:id}"/>
                                                                        <with-param name="status" value="Skipped"/>
                                                                        <with-param name="message"
                                                                                    value="There is no resolution added to the task."/>
                                                                    </call-template>
                                                                </then>
                                                                <else>
                                                                    <!--FOR EACH comment : BEGIN -->
                                                                    <iterate continueParent="true"
                                                                             id="bugherdTaskComments"
                                                                             expression="//comments" sequential="true">
                                                                        <target>
                                                                            <sequence>
                                                                                <property name="bugherd.noteContent"
                                                                                          expression="json-eval($.comments.text)"/>
                                                                                <script language="js"><![CDATA[
																   //retrieving the resolution and the task description of the incident from notes.
																   var noteContent = mc.getProperty('bugherd.noteContent'); 
																   if(noteContent.indexOf("Task Resolution:")!=-1){
																	  var noteStringArray = noteContent.split('Task Resolution:');
																	  mc.setProperty('taskResolution',noteStringArray[1]);
																   }
																   if(noteContent.indexOf("Task Description:")!=-1){
																	  var noteStringArray = noteContent.split('Task Description:');
																	  mc.setProperty('taskDescription',noteStringArray[1]);
																   }
															  ]]></script>
                                                                                <!-- Set Producteev task description to operation scope -->
                                                                                <filter source="boolean(get-property('taskDescription'))"
                                                                                        regex="true">
                                                                                    <then>
                                                                                        <property
                                                                                                name="producteev.taskDescription"
                                                                                                expression="get-property('taskDescription')"/>
                                                                                    </then>
                                                                                </filter>
                                                                                <!-- Set Producteev task resolution to operation scope -->
                                                                                <filter source="boolean(get-property('taskResolution'))"
                                                                                        regex="true">
                                                                                    <then>
                                                                                        <property
                                                                                                name="producteev.message"
                                                                                                expression="get-property('taskResolution')"
                                                                                                scope="operation"/>
                                                                                    </then>
                                                                                </filter>
                                                                            </sequence>
                                                                        </target>
                                                                    </iterate>
                                                                    <!-- Call the sequence to perform the following activities ;
                                                                       ACTIVITY 1: Add a note to Producteev task containing the resolution of the Bug in Bugherd.
                                                                       ACTIVITY 2: Update the Producteev task as 'resolved'.
                                                                       ACTIVITY 3: Send a message to the requester of the ticket via Mandrill informing that the task is resolved with the given resolution.
                                                                       ACTIVITY 4: Update the appropriate Case in ZohoCrm with setting the resolution of the task and the status as resolved.
                                                                    -->
                                                                    <sequence key="updateTaskAndSendMessage"/>
                                                                </else>
                                                            </filter>
                                                            <!--END : Checking whether there are sufficient comments to process. -->
                                                        </else>
                                                    </filter>
                                                    <!--END : Checking whether there are any errors in retrieving the comments of the task. -->
                                                    <!--Increment the resolved tasks count -->
                                                    <property name="bugherd.resolvedTasksIndex"
                                                              expression="get-property('operation','bugherd.resolvedTasksIndex') + 1"
                                                              scope="operation"/>
                                                    <filter
                                                            xpath="(get-property('operation', 'bugherd.projectsCount') = get-property('operation', 'bugherd.projectsIndex')) and (get-property('operation', 'bugherd.resolvedTasksCount') = get-property('operation', 'bugherd.resolvedTasksIndex'))">
                                                        <then>
                                                            <loopback/>
                                                        </then>
                                                    </filter>
                                                </sequence>
                                            </target>
                                        </iterate>
                                        <!--END : FOR EACH task -->
                                    </else>
                                </filter>
                                <!--END : Checking whether there are sufficient tasks to process. -->
                                <filter
                                        xpath="(get-property('operation', 'bugherd.projectsCount') = get-property('operation', 'bugherd.projectsIndex')) and (get-property('operation', 'bugherd.resolvedTasksCount') = get-property('operation', 'bugherd.resolvedTasksIndex'))">
                                    <then>
                                        <filter source="get-property('operation','bugherd.resolvedTasksCount')"
                                                regex="0.0">
                                            <call-template target="responseHandlerTemplate">
                                                <with-param name="activity"
                                                            value="bugherd_updateTasksAndNotifyClients"/>
                                                <with-param name="id" value="{$ctx:id.empty}"/>
                                                <with-param name="status" value="Skipped"/>
                                                <with-param name="message"
                                                            value="There are no resolved tasks to process."/>
                                            </call-template>
                                        </filter>
                                        <loopback/>
                                    </then>
                                </filter>
                            </sequence>
                        </target>
                    </iterate>
                    <!--END: FOR EACH project -->
                </else>
            </filter>
            <!--END : Checking whether there are sufficient projects to process. -->
        </else>
    </filter>
    <!--END: If there occurs an authentication failure in Bugherd then display a custom generated error message. -->
</sequence>