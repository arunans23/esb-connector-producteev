<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~   WSO2 Inc. licenses this file to you under the Apache License,
  ~   Version 2.0 (the "License"); you may not use this file except
  ~   in compliance with the License.
  ~   You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  -->
<!-- Method Documentation URL: https://www.producteev.com/api/doc/#AuthenticationOAuth20Flows -->
<template name="getAccessTokenFromRefreshToken" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="apiUrl" description="Base endpoint URL of Google Drive API." />
   <sequence>
      <!-- If the user sends the apiUrl it will be used, else it'll be fetched from the registry. -->
      <filter source="boolean(get-property('uri.var.apiUrl'))" regex="false">
         <then>
            <property name="uri.var.apiUrl" expression="get-property('registry', 'connectors/Producteev/apiUrl')" />
         </then>
      </filter>
      <property name="uri.var.refreshToken" expression="get-property('registry', 'connectors/Producteev/refreshToken')" />
      <property name="uri.var.clientId" expression="get-property('registry', 'connectors/Producteev/clientId')" />
      <property name="uri.var.clientSecret" expression="get-property('registry', 'connectors/Producteev/clientSecret')" />
      <!-- Type of the grant used to get a new access token by negotiating the refresh token. -->
      <property name="uri.var.grantType" value="refresh_token" />
      <call>
         <endpoint>
            <http method="get"
               uri-template="{+uri.var.apiUrl}/oauth/v2/token?client_id={uri.var.clientId}&amp;client_secret={uri.var.clientSecret}&amp;grant_type={uri.var.grantType}&amp;refresh_token={uri.var.refreshToken}" />
         </endpoint>
      </call>
      <!-- Setting the new access token to the property. -->
      <property name="uri.var.accessToken" expression="json-eval($.access_token)" />
      <property name="uri.var.refreshToken" expression="json-eval($.refresh_token)" />
      <script language="js">
         <![CDATA[
             importPackage(Packages.org.apache.synapse.config);
             var newAccessToken = mc.getProperty('uri.var.accessToken');
             if(newAccessToken != null && newAccessToken != ''){
                var existingAccessToken = mc.getConfiguration().getRegistry().getResource("connectors/Producteev/accessToken");
                if(existingAccessToken == null){
                  // Create the registry entry if no such entry exists.
                  mc.getConfiguration().getRegistry().newResource("connectors/Producteev/accessToken", newAccessToken);
                } else {
                  // Update the registry entry if it already exists.
                  mc.getConfiguration().getRegistry().updateResource("connectors/Producteev/accessToken", newAccessToken);
                }     
             } 
             var newRefreshToken = mc.getProperty('uri.var.refreshToken');
             if(newRefreshToken != null && newRefreshToken != ''){
                var existingRefreshToken = mc.getConfiguration().getRegistry().getResource("connectors/Producteev/refreshToken");
                if(existingRefreshToken == null){
                  // Create the registry entry if no such entry exists.
                  mc.getConfiguration().getRegistry().newResource("connectors/Producteev/refreshToken", newRefreshToken);
                } else {
                  // Update the registry entry if it already exists.
                  mc.getConfiguration().getRegistry().updateResource("connectors/Producteev/refreshToken", newRefreshToken);
                }     
             }                          
         ]]>
      </script>
      <!-- Boolean flag to keep track of whether the method to get the access token is already called or not. -->
      <property name="uri.var.refreshTokenNegotiated" value="true" />
      <!--Removing custom headers from the Response. -->
      <header name="Vary" action="remove" scope="transport" />
      <header name="X-Powered-By" action="remove" scope="transport" />
      <header name="Cache-Control" action="remove" scope="transport" />
      <header name="WWW-Authenticate" action="remove" scope="transport" />
      <header name="Pragma" action="remove" scope="transport" />
   </sequence>
</template>
